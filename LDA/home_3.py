# -*- coding: utf-8 -*-
"""Home_3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vWzSbd4udQv0uJFSx5jD6wOQx3Sc2V9t

# **HOMEWORK 3 - CLASSIFICAÇÃO**


---



> Classificador: *LDA*

> Dataset: *Wine Quality*

> Codigo: Patrícia

---

```
# BIBLIOTECAS
```
"""

import pandas             as pd
import numpy              as np
import matplotlib.pyplot  as plt
import seaborn            as sn

        # Normalização #
#from scipy.stats import norm
from sklearn.preprocessing import StandardScaler

       # Classificadores
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis

       # Treinamento e Teste ; Acuracia #
from sklearn.model_selection import train_test_split
from sklearn import metrics
from sklearn.metrics import accuracy_score

       # Validação Cruzada #
from sklearn.model_selection import cross_val_score, KFold
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import KFold


      # Matriz de confusao #
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
from sklearn.metrics import classification_report
from sklearn.metrics import precision_score
from sklearn.metrics import recall_score

wine = pd.read_csv('https://raw.githubusercontent.com/xToshiro/homework-ICA/main/winequality-white.csv', sep=";")

y = wine['quality']
x = wine.drop(columns=['quality' ])

"""

```
# NORMALIZAÇÃO DOS DADOS
```


"""

scaler = StandardScaler()
X_norm = scaler.fit_transform(x)

#print(X_normalized)

"""


```
# DIVISÃO TREINO E TESTE
```

"""

# Conjunto de dados normalizado em treinamento e teste (75% treinamento, 25% teste)
X_train, X_test, y_train, y_test = train_test_split(X_norm, y, test_size=0.25, random_state=42)

# Salvando os conjuntos de treinamento e teste normalizados em arquivos CSV
pd.DataFrame(X_train, columns=x.columns).to_csv('treino_norm.csv', index=False)
pd.DataFrame(X_test, columns=x.columns).to_csv('teste_norm.csv', index=False)

# Salvando os rótulos (y) em arquivos CSV
pd.DataFrame(y_train).to_csv('y_treino.csv', index=False, header=['quality'])
pd.DataFrame(y_test).to_csv('y_teste.csv', index=False, header=['quality'])

y_train = pd.read_csv('y_treino.csv')
y_test  = pd.read_csv('y_teste.csv')

train_norm = pd.read_csv('treino_norm.csv')
test_norm  = pd.read_csv('teste_norm.csv')

"""
print('y_train:', y_train)
print('------------------')
print('y_test:' ,y_test)
print('------------------')
print('train_norm:', train_norm)
print('------------------')
print('test_norm:', test_norm)

"""

"""```
# VALIDAÇÃO CRUZADA
```


"""

train_norm = pd.read_csv('treino_norm.csv')
y_train = pd.read_csv('y_treino.csv')['quality']

model = LinearDiscriminantAnalysis()

# Validação cruzada no conjunto de treinamento normalizado
cv_scores = cross_val_score(model, train_norm, y_train, cv=5)

# Validação cruzada
print("Scores de validação cruzada:", cv_scores)
print("Média dos scores de validação cruzada:", cv_scores.mean())

##############################

# Treinando o modelo no conjunto de treinamento completo
model.fit(train_norm, y_train)

# Fazendo previsões no conjunto de teste
y_pred = model.predict(test_norm)

# Acurácia
acc = accuracy_score(y_test, y_pred)

print('Acuracia: {:.2f}%'.format(acc*100))

"""

```
# MATRIZ DE CONFUSÃO
```

"""

# Matriz de confusão
print('Matriz de confusao: ')
print(confusion_matrix(y_test, y_pred))

cm = confusion_matrix(y_test, y_pred)
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=model.classes_)
disp.plot()
plt.show()

print(classification_report(y_test, y_pred, digits=3))

"""

```
# PLOT
```


"""

# Scatterplot dos scores da validação cruzada
plt.scatter(range(1, len(cv_scores) + 1), cv_scores, color='blue')
plt.title('Scatterplot dos Scores da Validação Cruzada')
plt.xlabel('Fold')
plt.ylabel('Score')
plt.show()

"""
sn.scatterplot(x='density', y='residual sugar', hue='quality', data=wine, )
plt.legend(bbox_to_anchor=(1, 1), loc=2)

plt.show()

"""